var search_data = {"index":{"searchIndex":["gitview","git_version()","repo_branches()","repo_commits()","repo_committers()","repo_email()","repo_exists?()","repo_files()","repo_firstcommit()","repo_lastcommit()","repo_leastchanged()","repo_mostchanged()","repo_name()","repo_remotes()","repo_status()","repo_user()"],"longSearchIndex":["gitview","gitview#git_version()","gitview#repo_branches()","gitview#repo_commits()","gitview#repo_committers()","gitview#repo_email()","gitview#repo_exists?()","gitview#repo_files()","gitview#repo_firstcommit()","gitview#repo_lastcommit()","gitview#repo_leastchanged()","gitview#repo_mostchanged()","gitview#repo_name()","gitview#repo_remotes()","gitview#repo_status()","gitview#repo_user()"],"info":[["Gitview","","Gitview.html","","<p>This class is used to gather git repo information using backticks or\nsystem(). None of the methods expects …\n"],["git_version","Gitview","Gitview.html#method-i-git_version","()","<p>Get the version of git\n"],["repo_branches","Gitview","Gitview.html#method-i-repo_branches","()","<p>Count branches of the repository.\n"],["repo_commits","Gitview","Gitview.html#method-i-repo_commits","()","<p>Count total commits in the master branch excluding merges.\n"],["repo_committers","Gitview","Gitview.html#method-i-repo_committers","()","<p>Use output of git shortlog -sn and truncate to array with first 3 lines to\ncreate a list of the 3 most …\n"],["repo_email","Gitview","Gitview.html#method-i-repo_email","()","<p>Determine repo user email. If unset locally and globally, “unset@unset” is\nreported.\n"],["repo_exists?","Gitview","Gitview.html#method-i-repo_exists-3F","()","<p>Checks to see if a repo exists in the current working directory. If one is\nnot found, the program is …\n"],["repo_files","Gitview","Gitview.html#method-i-repo_files","()","<p>Count files in the repository.\n"],["repo_firstcommit","Gitview","Gitview.html#method-i-repo_firstcommit","()","<p>Identify first commit in the repository.\n"],["repo_lastcommit","Gitview","Gitview.html#method-i-repo_lastcommit","()","<p>Identify most recent commit in the repository.\n"],["repo_leastchanged","Gitview","Gitview.html#method-i-repo_leastchanged","()","<p>Identify least changed files in the repository, using the class array\n@@allchanged created by repo_mostchanged …\n"],["repo_mostchanged","Gitview","Gitview.html#method-i-repo_mostchanged","()","<p>Identify most changed files in the repository\n"],["repo_name","Gitview","Gitview.html#method-i-repo_name","()","<p>Use the name of the current working directory as the name of the git\nrepository.\n"],["repo_remotes","Gitview","Gitview.html#method-i-repo_remotes","()","<p>Gather list of non-local copies of the repository.\n"],["repo_status","Gitview","Gitview.html#method-i-repo_status","()","<p>Check the repo to see if it is current or not\n"],["repo_user","Gitview","Gitview.html#method-i-repo_user","()","<p>Determine repo user name. If unset locally and globally, “unset” is\nreported.\n"]]}}